from icecream import ic

print("#" * 100)
print("While")
print("#" * 100)

lst = ["a", "b", "c", "d", "e"]
# Создаём цикл с условием, что длина списка больше 2.
while len(lst) > 2:  # делай, пока…
    # Начало блока кода с телом цикла
    # Обновляем список, удаляя первый элемент в нём.
    lst.pop(0)
    # Выводим промежуточный результат
    ic(lst)
    # Конец блока кода с телом цикла
# Выводим на экран результирующий список
ic("Result", lst)
# Будет выведено:
# ['b', 'c', 'd', 'e']
# ['c', 'd', 'e']
# ['d', 'e']
# Result ['d', 'e']

print("#" * 40)
# Задаём вес входящего в лифт человека
weight = 67
# Задаём грузоподъёмность
max_weight = 400
# Задаём суммарный вес людей в лифте
S = 0
# Создаём цикл, который будет работать, пока S не превысит max_weight.
while S < max_weight:  # делай, пока…
    # Увеличиваем суммарный вес
    # Равносильно S = S + weight
    S += weight
    # Выводим значение суммарного веса после обновления
    ic("Current sum weight", S)
# Отделяем промежуточный вывод от результата пустой строкой
print()
# Выводим итоговое значение перевеса
ic("Overweight {} kg".format(S - max_weight))

print("#" * 40)
# Создаём накопительную переменную, в которой будем считать сумму.
S = 0
# Задаём текущее натуральное число
n = 1

# Создаём цикл, который будет работать, пока сумма не превысит 500.
while S < 500:  # делай, пока …
    # Увеличиваем сумму, равносильно S = S + n
    S += n
    # Увеличиваем значение натурального числа
    n += 1
    # Выводим строку ожидания
    ic("Still counting...")
# Отделяем промежуточный вывод от результата пустой строкой
print()
# Выводим результирующую сумму
ic("Sum is: ", S)
# Выводим результирующее количество чисел
ic("Numbers total: ", n - 1)

print("#" * 40)
# Хорошо
n = 1
# В этой программе условие всегда True, цикл будет бесконечным.
while True:
    ic("New client !")
    n += 1
    # Условие, при достижении которого цикл while будет принудительно завершён.
    if n > 10:
        break

print("#" * 40)
target_money = 3000
money = 1000
# Введите свое решение ниже
year_count = 0
while target_money > money:
    year_count += 1
    money *= 1.08

print("#" * 40)
n = 3
curr_num = 1
prev_num = 0
fibonacci_list = []
while len(fibonacci_list) < n:
    fibonacci_list.append(curr_num)
    curr_num, prev_num = curr_num + prev_num, curr_num
ic(fibonacci_list)
