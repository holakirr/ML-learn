from icecream import ic

print("#" * 100)
print(".map()")
print("#" * 100)

print("#" * 40, "Example 1", "#" * 40)
# Список из слов, длину которых мы хотим вычислить
words_list = [
    "We're",
    "in",
    "a",
    "small",
    "village",
    "near",
    "Chicago",
    "My",
    "cousin's",
    "getting",
    "married.",
]
# [5, 2, 1, 5, 7, 4, 7, 2, 8, 7, 8]
# Создаём пустой список, куда будем заносить результаты
lengths_list = []
# Создаём цикл по элементам списка names
for word in words_list:
    # Вычисляем длину текущего слова
    length = len(word)
    # Добавляем вычисленную длину слова в список
    lengths_list.append(length)
# Смотрим, что получилось
ic(lengths_list)


## Будет выведено:
## [5, 2, 1, 5, 7, 4, 7, 2, 8, 7, 8]

print("#" * 40)
# Применяем функцию len к каждому элементу списка
# Для этого передаём функцию len и список words_list в функцию map
lengths_map = map(len, words_list)
# Смотрим, что получилось
print(lengths_map)

## Будет выведено:
## <map object at 0x000001758F73DAC0>

# Применяем функцию len к каждому элементу списка
# Для этого передаём функцию len и список words_list в функцию map
# Результат преобразуем в список
lengths_list = list(map(len, words_list))
# Посмотрим, что получилось
ic(lengths_list)

## Будет выведено:
## [5, 2, 1, 5, 7, 4, 7, 2, 8, 7, 8]

print("#" * 40, "Example 2", "#" * 40)

expenses = [(101, 203, 167), (214, 351, 752), (255, 2537), (852, 362, 366)]
# Применяем функцию max к каждому элементу списка
# Для этого передаём функцию max и список expenses в функцию map
# Результат преобразуем в список
expenses_max = list(map(max, expenses))
# Смотрим, что получилось
print(expenses_max)

## Будет выведено
## [203, 752, 2537, 852]

print("#" * 40, "Task 1", "#" * 40)
old_list = ["1", "2", "3", "4", "5", "6", "7"]
new_list = list(map(int, old_list))
ic(new_list)
## new_list = [1, 2, 3, 4, 5, 6, 7]
old_list = ["101", "203", "33", "45", "51", "46", "77"]
new_list = list(map(int, old_list))
ic(new_list)
## new_list = [101, 203, 33, 45, 51, 46, 77]

print("#" * 40, "Task 2", "#" * 40)
expenses = [
    [2356, 4537, 8678],
    [7395, 1298, 6500, 4791],
    [6341, 3408],
    [1105, 8374, 5914],
    [1024, 7333],
    [3500, 2008, 9375, 6144],
]
expenses_sum = list(map(sum, expenses))
ic(expenses_sum)
## expenses_sum = [15571, 19984, 9749, 15393, 8357, 21027]

print("#" * 40, "Example 3", "#" * 40)
# Список зарплат
salaries = [1500, 2200, 3500, 1200]
# Создаём пустой список, куда будем добавлять размеры налогов
taxes = []
# В цикле перебираем все зарплаты из списка
for salary in salaries:
    if salary < 1000:  # Если зарплата < 1000
        # Налог — 5 % от зарплаты
        taxes.append(salary * 0.05)
    elif salary < 2000:  # Если зарплата < 2000
        # Налог — 10 % от зарплаты
        taxes.append(salary * 0.1)
    else:
        # Налог — 15 % от зарплаты
        taxes.append(salary * 0.15)
# Выводим результат
ic(taxes)

## Будет выведено:
## [150.0, 330.0, 525.0, 120.0]


def calculate_tax(salary):
    if salary < 1000:  # Если зарплата < 1000
        # Налог — 5 % от зарплаты
        return salary * 0.05
    elif salary < 2000:  # Если зарплата < 2000
        # Налог — 10 % от зарплаты
        return salary * 0.1
    else:
        # Налог — 15 % от зарплаты
        return salary * 0.15


ic(calculate_tax(1500))

## Будет выведено:
## 150.0

# Применяем функцию calculate_tax к каждому элементу списка
# Для этого передаём функцию calculate_tax и список salaries в функцию map()
# Результат преобразуем к списку
taxes = list(map(calculate_tax, salaries))
# Выведем, что получилось
ic(taxes)


## Будет выведено:
## [150.0, 330.0, 525.0, 120.0]

print("#" * 40, "Example 4", "#" * 40)
quotes_dict = {
    "Преступление и наказание": "А знаешь ли... что низкие потолки и тесные комнаты душу и ум теснят.",
    "Война и мир": "И нет величия там, где нет простоты, добра и правды.",
    "Анна Каренина": "Если искать совершенства, то никогда не будешь доволен.",
    "Детство": "Правил у нас много, а правды нет.",
    "Колесо времени": "Ничто так на соединяет людей, как улыбка.",
}
ic(list(quotes_dict.items()))
## Будет выведено:
## [('Преступление и наказание', 'А знаешь ли... что низкие потолки и тесные комнаты душу и ум теснят.'), ('Война и мир', 'И нет величия там, где нет простоты, добра и правды.'), ('Анна Каренина', 'Если искать совершенства, то никогда не будешь доволен.'), ('Детство', 'Правил у нас много, а правды нет.'), ('Колесо времени', 'Ничто так на соединяет людей, как улыбка.')]
ic(quotes_dict.items())
# dict_items([('Преступление и наказание', 'А знаешь ли... что низкие потолки и тесные комнаты душу и ум теснят.'), ('Война и мир', 'И нет величия там, где нет простоты, добра и правды.'), ('Анна Каренина', 'Если искать совершенства, то никогда не будешь доволен.'), ('Детство', 'Правил у нас много, а правды нет.'), ('Колесо времени', 'Ничто так на соединяет людей, как улыбка.')])


# Функция для преобразования одного элемента списка кортежей
def preprocessing_quoutes(name_quotes_tuple):
    # Разделяем составляющие кортежа на отдельные переменные
    name, text = name_quotes_tuple
    # Приводим цитату к нижнему регистру
    text = text.lower()
    # Заменяем точки и запятые на пустые строки
    text = text.replace(".", "")
    text = text.replace(",", "")
    # Разделяем цитату на слова по пробелу
    words = text.split(" ")
    # Возвращаем кортеж из названия произведения и текста
    return (name, words)


# Проверяем, как работает функция
test_text = ("Детство", "Правил у нас много, а правды нет.")
ic(preprocessing_quoutes(test_text))
## Будет выведено:
## ('Детство', ['правил', 'у', 'нас', 'много', 'а', 'правды', 'нет'])

# Применяем функцию processing_quoutes к списку кортежей
# Результат преобразовываем в словарь
processed_quotes_dict = dict(map(preprocessing_quoutes, quotes_dict.items()))

print(processed_quotes_dict)

## Будет выведено:
## {'Преступление и наказание': ['а', 'знаешь', 'ли', 'что', 'низкие', 'потолки', 'и', 'тесные', 'комнаты', 'душу', 'и', 'ум', 'теснят'], 'Война и мир': ['и', 'нет', 'величия', 'там', 'где', 'нет', 'простоты', 'добра', 'и', 'правды'], 'Анна Каренина': ['если', 'искать', 'совершенства', 'то', 'никогда', 'не', 'будешь', 'доволен'], 'Детство': ['правил', 'у', 'нас', 'много', 'а', 'правды', 'нет'], 'Колесо времени': ['ничто', 'так', 'на', 'соединяет', 'людей', 'как', 'улыбка']}

print("#" * 40, "Example 5", "#" * 40)
prices = {"яблоко": 99, "апельсин": 99, "вишня": 147, "персик": 145, "грейпфрут": 139}
cut_taxes = lambda tup: (
    tup[0],
    round(tup[1] * 0.95, 2),
)
new_prices = dict(map(cut_taxes, prices.items()))
ic(new_prices)
## new_prices = {'яблоко': 94.05, 'апельсин': 94.05, 'вишня': 139.65, 'персик': 137.75, 'грейпфрут': 132.05}

print("#" * 40, "Task 3", "#" * 40)
data = [
    ("Amanda", 1.61, 51),
    ("Patricia", 1.65, 61),
    ("Marcos", 1.91, 101),
]  # Положим lambda-функцию в переменную для удобства
# x — кортеж (элемент исходного списка data)
map_func = lambda x: (x[0], x[1], x[2], round(x[2] / (x[1] ** 2), 1))
# Проверим работу функции для одного кортежа
map_func(("Amanda", 1.61, 51))
## Будет выведено:
## ('Amanda', 1.61, 51, 19.7)

# Создаём lambda-функцию, которая считает BMI, и применяем её к каждому элементу списка
map_func = lambda x: (*x, round(x[2] / (x[1] ** 2), 1))
updated_data = list(map(map_func, data))
# Выводим результат
print(updated_data)

## Будет выведено:
## [('Amanda', 1.61, 51, 19.7), ('Patricia', 1.65, 61, 22.4), ('Marcos', 1.91, 101, 27.7)]

print("#" * 40, "Task 4", "#" * 40)
guests = ["Boris", "Ivan", "Bob"]

new_guests = list(map(lambda x: "Mr. " + x, guests))
ic(new_guests)
# new_guests = ["Mr. Boris", "Mr. Ivan", "Mr. Bob"]

print("#" * 40, "Task 5", "#" * 40)
docs = [
    "//doc/5041434?query=data%20science",
    "//doc/5041567?query=data%20science",
    "//doc/4283670?query=data%20science",
    "//doc/3712659?query=data%20science",
    "//doc/4997267?query=data%20science",
    "//doc/4372673?query=data%20science",
    "//doc/3779060?query=data%20science",
    "//doc/3495410?query=data%20science",
    "//doc/4308832?query=data%20science",
    "//doc/4079881?query=data%20science",
]
docs = [
    "//doc/5041434?query=data%20science",
    "//doc/5041567?query=data%20science",
    "//doc/4283670?query=data%20science",
    "//doc/3712659?query=data%20science",
    "//doc/4997267?query=data%20science",
]
url = "https://www.kommersant.ru"
links = list(map(lambda x: url + x, docs))
## links = ['https://www.kommersant.ru//doc/5041434?query=data%20science', 'https://www.kommersant.ru//doc/5041567?query=data%20science', 'https://www.kommersant.ru//doc/4283670?query=data%20science', 'https://www.kommersant.ru//doc/3712659?query=data%20science', 'https://www.kommersant.ru//doc/4997267?query=data%20science']

print("#" * 40, "Task 6", "#" * 40)
data = [
    (0.00632, 6.575, 65.2, 296.0, 4.98),
    (0.02731, 6.421, 78.9, 242.0, 9.14),
    (0.02729, 7.185, 61.1, 242.0, 4.03),
    (0.03237, 6.998, 45.8, 222.0, 2.94),
    (0.06905, 7.147, 54.2, 222.0, 5.33),
    (0.02985, 6.43, 58.7, 222.0, 5.21),
    (0.08829, 6.012, 66.6, 311.0, 12.43),
]
updated_data = list(map(lambda x: (*x, round(x[0] * x[3] * x[4], 2)), data))
ic(updated_data)
# updated_data = [
#     (0.00632, 6.575, 65.2, 296.0, 4.98, 9.32),
#     (0.02731, 6.421, 78.9, 242.0, 9.14, 60.41),
#     (0.02729, 7.185, 61.1, 242.0, 4.03, 26.61),
#     (0.03237, 6.998, 45.8, 222.0, 2.94, 21.13),
#     (0.06905, 7.147, 54.2, 222.0, 5.33, 81.7),
#     (0.02985, 6.43, 58.7, 222.0, 5.21, 34.53),
#     (0.08829, 6.012, 66.6, 311.0, 12.43, 341.31),
# ]
